{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Nav/Nav.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","handleClick","id","score","message","alt","name","src","image","Wrapper","children","Nav","brand","hiScore","styles","title","background","backgroundSize","color","minHeight","padding","paddingBottom","textAlign","borderBottom","Title","style","subtitle","App","state","cats","clicked","handleShuffleArray","arr","i","length","j","Math","floor","random","indexOf","setState","concat","topScore","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yqCAceA,G,MAXF,SAAAC,GAAK,OAChB,yBACEC,UAAU,OACVC,QAAS,kBAAMF,EAAMG,YAAYH,EAAMI,MAEvC,yBAAKH,UAAU,iBACb,yBAAKA,UAA4B,IAAhBD,EAAMK,OAAiC,6BAAlBL,EAAMM,QAA0C,QAAU,GAAIC,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,YCJvHC,G,MAFC,SAAAX,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMY,YC4B1CC,G,MA5BH,SAAAb,GAUR,OACI,yBAAKC,UAAU,UACX,4BACI,wBAAIA,UAAU,SACTD,EAAMc,OAEX,wBAAIV,GAAG,UAAUH,UAbH,2BAAlBD,EAAMM,QACC,UACkB,6BAAlBN,EAAMM,QACN,iBADJ,GAYMN,EAAMM,SAEX,4BACI,0BAAML,UAAU,SAAhB,WAAiCD,EAAMK,OAD3C,IACyD,0BAAMJ,UAAU,cAAhB,KADzD,IAC+F,0BAAMA,UAAU,SAAhB,cAAoCD,EAAMe,cCpBnJC,G,MAAS,CACXC,MAAO,CACHC,WAAY,qCACZC,eAAgB,YAChBC,MAAO,OACPC,UAAW,QACXC,QAAS,aACTC,cAAe,QACfC,UAAW,SACXC,aAAc,oBAWPC,EAPD,SAAA1B,GAAK,OACf,yBAAKC,UAAU,QAAQ0B,MAAOX,EAAOC,OACjC,4BAAMjB,EAAMY,UACZ,uBAAGX,UAAU,YAAYD,EAAM4B,Y,OC6DxBC,G,iNAtEbC,MAAQ,CACNC,KAAMA,EACNC,QAAS,GACT3B,MAAO,EACPU,QAAS,EACTT,QAAS,4B,EAIX2B,mBAAqB,SAACC,GACpB,IAAK,IAAIC,EAAID,EAAIE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAEpB,CAACD,EAAIG,GAAIH,EAAIC,IAA/BD,EAAIC,GAFkC,KAE9BD,EAAIG,GAF0B,KAIzC,OAAOH,G,EAGT/B,YAAc,SAACC,IAE2B,IAApC,EAAK0B,MAAME,QAAQS,QAAQrC,GAC7B,EAAKsC,SACH,CACEX,KAAMA,EACNC,QAAS,EAAKF,MAAME,QAAQW,OAAOvC,GACnCC,MAAO,EAAKyB,MAAMzB,MAAQ,EAC1BU,QAAU,EAAKe,MAAMf,QAAU,EAAKe,MAAMzB,MAAS,EAAKyB,MAAMf,QAAU,EAAKe,MAAMf,QAAU,EAC7FT,QAAS,2BAIb,EAAKoC,SACH,CACEX,KAAMA,EACNC,QAAS,GACT3B,MAAO,EACPuC,SAAW,EAAKd,MAAMzB,MAAQ,EAAKyB,MAAMf,QAAW,EAAKe,MAAMzB,MAAQ,EAAKyB,MAAMf,QAClFT,QAAS,6BAIf,EAAK2B,mBAAmBF,I,wEAIhB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEjB,MAAM,kBACNR,QAASuC,KAAKf,MAAMxB,QACpBD,MAAOwC,KAAKf,MAAMzB,MAClBU,QAAS8B,KAAKf,MAAMf,UAEtB,kBAAC,EAAD,CAAOa,SAAS,+EAAhB,mBACCiB,KAAKf,MAAMC,KAAKe,KAAI,SAAAf,GAAI,OACvB,kBAAC,EAAD,CACE5B,YAAa,EAAKA,YAClBC,GAAI2B,EAAK3B,GACT2C,IAAKhB,EAAK3B,GACVI,KAAMuB,EAAKvB,KACXF,QAAS,EAAKwB,MAAMxB,QACpBI,MAAOqB,EAAKrB,MACZL,MAAO,EAAKyB,MAAMzB,gB,GAhEZ2C,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7627bd42.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n  <div\n    className=\"card\"\n    onClick={() => props.handleClick(props.id)}\n  >\n    <div className=\"img-container\">\n      <img className={(props.score === 0 && props.message !== \"Click an image to begin!\") ? \"shake\" : \"\"} alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default Card;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = props => {\n\n    const messageClass = () => {\n        if (props.message === \"You guessed correctly!\") {\n            return \"correct\";\n        } else if (props.message === \"You guessed incorrectly!\") {\n            return \"incorrect\";\n        }\n    }\n\n    return (\n        <nav className=\"navbar\">\n            <ul>\n                <li className=\"brand\">\n                    {props.brand}\n                </li>\n                <li id=\"message\" className={messageClass()}>\n                    {props.message}\n                </li>\n                <li>\n                    <span className=\"score\"> Score: {props.score}</span> <span className=\"scoreSplit\">|</span> <span className=\"score\">Top Score: {props.hiScore}</span>\n                </li>\n            </ul>\n        </nav>\n    )\n\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./Title.css\";\n\nconst styles = {\n    title: {\n        background: \"url('./images/Captain-Phasma.jpg')\",\n        backgroundSize: \"100% auto\",\n        color: \"#fff\",\n        minHeight: \"400px\",\n        padding: \"180px 20px\",\n        paddingBottom: \"140px\",\n        textAlign: \"center\",\n        borderBottom: \"1px solid #fff\"\n    }\n}\n\nconst Title = props => (\n    <div className=\"title\" style={styles.title}>\n        <h1 >{props.children}</h1>\n        <p className=\"subtitle\">{props.subtitle}</p>\n    </div>\n);\n\nexport default Title;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Nav from \"./components/Nav\";\nimport Title from \"./components/Title\";\nimport cats from \"./cats.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.cats to the cats json array\n  state = {\n    cats: cats,\n    clicked: [],\n    score: 0,\n    hiScore: 0,\n    message: \"Click an image to begin!\"\n  };\n\n  \n  handleShuffleArray = (arr) => {\n    for (let i = arr.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  }\n\n  handleClick = (id) => {\n    // alert(id);\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.setState(\n        {\n          cats: cats,\n          clicked: this.state.clicked.concat(id),\n          score: this.state.score + 1,\n          hiScore: (this.state.hiScore > this.state.score) ? this.state.hiScore : this.state.hiScore + 1,\n          message: \"You guessed correctly!\"\n        }\n      );\n    } else {\n      this.setState(\n        {\n          cats: cats,\n          clicked: [],\n          score: 0,\n          topScore: (this.state.score > this.state.hiScore) ? this.state.score : this.state.hiScore,\n          message: \"You guessed incorrectly!\"\n        }\n      );\n    }\n    this.handleShuffleArray(cats);\n  }\n\n  // Map over this.state.cats and render a component for each cat object\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          brand=\"Clicky Cat Game\"\n          message={this.state.message}\n          score={this.state.score}\n          hiScore={this.state.hiScore}\n        />\n        <Title subtitle=\"Click on a cat image to earn points, but don't click on any more than once!\">Clicky Cat Game</Title>\n        {this.state.cats.map(cats => (\n          <Card\n            handleClick={this.handleClick}\n            id={cats.id}\n            key={cats.id}\n            name={cats.name}\n            message={this.state.message}\n            image={cats.image}\n            score={this.state.score}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}